- name: Create talos Cluster in Proxmox
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - conf/infra-talos.yaml
    - conf/proxmox.yaml
  vars_prompt:
    - name: proxmox_api_password
      prompt: "Proxmox password"
      private: true
  tasks:
    # Intall:
    #   pip install proxmoxer
    #   curl -sL https://talos.dev/install | sh
    - name: Create Proxmox VM Controlplanes
      community.general.proxmox_kvm:
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        api_host: "{{ proxmox_api_host }}"
        api_port: "{{ proxmox_api_port }}"
        vmid: "{{ item.id }}"
        node: "{{ item.node }}"
        name: "{{ item.name }}"
        agent: "enabled=1"
        cores: "{{ item.cores }}"
        cpu: "host"
        memory: "{{ item.memory }}"
        net:
          net0: 'virtio,bridge=vmbr0,firewall=1'
        ide:
          ide2: "nas-nfs:iso/talos-guest-qemu.iso,media=cdrom"
        scsihw: virtio-scsi-single
        scsi:
          scsi0: "local-lvm:{{ item.disks[0] }},format=raw"
        storage: local-lvm
        state: present
        autostart: true
        onboot: true
      loop: "{{ controlplanes }}"

    - name: Wait 2 min for VMs to create
      ansible.builtin.pause:
        minutes: 1

    - name: Start controlplanes
      community.general.proxmox_kvm:
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        api_host: "{{ proxmox_api_host }}"
        api_port: "{{ proxmox_api_port }}"
        name: "{{ item.name }}"
        node: "{{ item.node }}"
        state: started
      loop: "{{ controlplanes }}"

    - name: Wait 2 min for VMs to start
      ansible.builtin.pause:
        minutes: 2

    # Admito que es un poco magia negra
    - name: Get control planes net info
      changed_when: false
      ansible.builtin.shell: |
        set -o pipefail
        PROXMOX_IP="{{ proxmox_api_host }}"
        USERNAME="{{ proxmox_api_user }}"
        PASSWORD="{{ proxmox_api_password }}"
        RESPONSE=$(curl -k -s -d "username=${USERNAME}" -d "password=${PASSWORD}" "https://${PROXMOX_IP}:8006/api2/json/access/ticket")
        TICKET=$(echo $RESPONSE | jq -r '.data.ticket')
        # Check if we successfully obtained a ticket
        if [ -z "$TICKET" ] || [ "$TICKET" == "null" ]; then
                echo "Failed to obtain a ticket from Proxmox API."
                    exit 1
        fi
        export NODE="{{ item.node }}"
        export VM_ID="{{ item.id }}"
        VM_AGENT_INFO=$(curl -k -s -b "PVEAuthCookie=$TICKET" "https://${PROXMOX_IP}:8006/api2/json/nodes/${NODE}/qemu/${VM_ID}/agent/network-get-interfaces")
        IP_ADDRESS=$(echo $VM_AGENT_INFO | jq -r '.data.result[] | select(.name != "lo") | select(has("ip-addresses")) | .["ip-addresses"][] | select(.["ip-address-type"] == "ipv4") | select(.["ip-address"] | startswith("192")) | .["ip-address"] ')
        IF_NAME=$(echo $VM_AGENT_INFO | jq -r '.data.result[] | select(.name != "lo") | select(has("ip-addresses")) | select(.name | startswith("en")) | .name')
        echo "{\"ip\": \"$IP_ADDRESS\", \"if\": \"$IF_NAME\"}"
      loop: "{{ controlplanes }}"
      register: cp_ips

    - name: Get config
      changed_when: true
      ansible.builtin.shell: |
        export CONTROL_PLANE_IP="{{ cp_ips.results[0].stdout | from_json | json_query('ip') }}"
        if ! [ -d _out ]; then
          talosctl gen config talos-proxmox-cluster https://$CONTROL_PLANE_IP:6443 --output-dir _out --force \
            --install-image factory.talos.dev/installer/ce4c980550dd2ab1b17bbf2b08801c7eb59418eafe8f279833297925d67c7515:v1.8.0
        fi

    - name: Generate config patches controlplanes endpoint
      ansible.builtin.template:
        src: templates/cluster.j2
        dest: "_out/cluster-patch.yaml"
        mode: "0600"

    - name: Generate config patches controlplanes conf
      ansible.builtin.template:
        src: templates/machine_conf.j2
        dest: "_out/{{ item.1.name }}-controlplane-patch.yaml"
        mode: "0600"
      loop: "{{ cp_ips.results | zip(controlplanes) | list }}"

    - name: Patch controlplanes config
      changed_when: true
      ansible.builtin.shell: |
        talosctl machineconfig patch _out/controlplane.yaml --patch @_out/cluster-patch.yaml -o _out/controlplane-patched.yaml
        talosctl machineconfig patch _out/controlplane-patched.yaml \
          --patch @_out/{{ item.1.name }}-controlplane-patch.yaml \
          -o _out/{{ item.1.name }}-controlplane.yaml
      loop: "{{ cp_ips.results | zip(controlplanes) | list }}"

    - name: Apply controlplanes config
      changed_when: true
      ansible.builtin.shell: |
        export CONTROL_PLANE_IP="{{ item.0.stdout | from_json | json_query('ip') }}"
        talosctl apply-config --insecure --nodes $CONTROL_PLANE_IP --file _out/{{ item.1.name }}-controlplane.yaml
      loop: "{{ cp_ips.results | zip(controlplanes) | list }}"

    - name: Create Proxmox VM Workers
      community.general.proxmox_kvm:
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        api_host: "{{ proxmox_api_host }}"
        api_port: "{{ proxmox_api_port }}"
        vmid: "{{ item.id }}"
        node: "{{ item.node }}"
        name: "{{ item.name }}"
        agent: "enabled=1"
        cores: "{{ item.cores }}"
        cpu: "host"
        memory: "{{ item.memory }}"
        net:
          net0: 'virtio,bridge=vmbr0,firewall=1'
        ide:
          ide2: "nas-nfs:iso/talos-guest-qemu.iso,media=cdrom"
        scsihw: virtio-scsi-single
        scsi:
          scsi0: "local-lvm:{{ item.disks[0] }},format=raw"
          scsi1: "local-lvm:{{ item.disks[1] }},format=raw"
        storage: local-lvm
        state: present
        autostart: true
        onboot: true
      loop: "{{ workers }}"

    - name: Wait 2 min for VMs to create
      ansible.builtin.pause:
        minutes: 1

    - name: Start workers
      community.general.proxmox_kvm:
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        api_host: "{{ proxmox_api_host }}"
        api_port: "{{ proxmox_api_port }}"
        name: "{{ item.name }}"
        node: "{{ item.node }}"
        state: started
      loop: "{{ workers }}"

    - name: Wait 2 min for VMs to start
      ansible.builtin.pause:
        minutes: 2

    - name: Get workers net info
      changed_when: false
      ansible.builtin.shell: |
        set -o pipefail
        PROXMOX_IP="{{ proxmox_api_host }}"
        USERNAME="{{ proxmox_api_user }}"
        PASSWORD="{{ proxmox_api_password }}"
        RESPONSE=$(curl -k -s -d "username=${USERNAME}" -d "password=${PASSWORD}" "https://${PROXMOX_IP}:8006/api2/json/access/ticket")
        TICKET=$(echo $RESPONSE | jq -r '.data.ticket')
        # Check if we successfully obtained a ticket
        if [ -z "$TICKET" ] || [ "$TICKET" == "null" ]; then
                echo "Failed to obtain a ticket from Proxmox API."
                    exit 1
        fi
        export NODE="{{ item.node }}"
        export VM_ID="{{ item.id }}"
        VM_AGENT_INFO=$(curl -k -s -b "PVEAuthCookie=$TICKET" "https://${PROXMOX_IP}:8006/api2/json/nodes/${NODE}/qemu/${VM_ID}/agent/network-get-interfaces")
        IP_ADDRESS=$(echo $VM_AGENT_INFO | jq -r '.data.result[] | select(.name != "lo") | select(has("ip-addresses")) | .["ip-addresses"][] | select(.["ip-address-type"] == "ipv4") | select(.["ip-address"] | startswith("192")) | .["ip-address"] ')
        IF_NAME=$(echo $VM_AGENT_INFO | jq -r '.data.result[] | select(.name != "lo") | select(has("ip-addresses"))| select(.name | startswith("en")) | .name')
        echo "{\"ip\": \"$IP_ADDRESS\", \"if\": \"$IF_NAME\"}"
      loop: "{{ workers }}"
      register: wor_ips

    - name: Generate config patches controlplanes conf
      ansible.builtin.template:
        src: templates/machine_conf.j2
        dest: "_out/{{ item.1.name }}-worker-patch.yaml"
        mode: "0600"
      loop: "{{ wor_ips.results | zip(workers) | list }}"

    - name: Patch workers config
      changed_when: true
      ansible.builtin.shell: |
        talosctl machineconfig patch _out/worker.yaml --patch @_out/cluster-patch.yaml -o _out/worker-patched.yaml
        talosctl machineconfig patch _out/worker-patched.yaml --patch @_out/{{ item.1.name }}-worker-patch.yaml -o _out/{{ item.1.name }}-worker.yaml
      loop: "{{ wor_ips.results | zip(workers) | list }}"

    - name: Apply workers config
      changed_when: true
      ansible.builtin.shell: |
        export WORKER_IP="{{ item.0.stdout | from_json | json_query('ip') }}"
        talosctl apply-config --insecure --nodes $WORKER_IP --file _out/{{ item.1.name }}-worker.yaml
      loop: "{{ wor_ips.results | zip(workers) | list }}"

    - name: Bootstrap etcd
      changed_when: true
      ansible.builtin.shell: |
        export TALOSCONFIG="_out/talosconfig"
        export CONTROL_PLANE_IP="{{ controlplanes[0].ip }}"
        talosctl config endpoint $CONTROL_PLANE_IP
        talosctl config node $CONTROL_PLANE_IP
        talosctl bootstrap
        rm -f kubeconfig
        talosctl kubeconfig .
        if [ -z ~/.kube/config ]; then mv ~/.kube/config ~/.kube/config.$(date +%Y%m%d-%H%M%s); fi
        cp -a kubeconfig ~/.kube/config

    - name: Wait 2 min for bootstrap to finish and workers to finish installing
      ansible.builtin.pause:
        minutes: 2

    - name: Set worker labels
      changed_when: true
      ansible.builtin.shell: |
        export KUBECONFIG="kubeconfig"
        kubectl label node {{ item.name }} node-role.kubernetes.io/worker="worker"
      loop: "{{ workers }}"

    - name: Approve pending csr for kubelet cert rotation
      changed_when: true
      ansible.builtin.shell: |
        set -o pipefail
        export KUBECONFIG="kubeconfig"
        for cert in `k get csr --no-headers=true | grep "system:node:{{ item.name }}" | awk '{print $1}'`; do
          kubectl certificate approve $cert
        done
      loop: "{{ workers + controlplanes }}"
